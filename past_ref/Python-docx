###Getting started with python-docx is easy. Let’s walk through the basics.

[Opening a document]
#First thing you’ll need is a document to work on. The easiest way is this:

from docx import Document
document = Document()


[Adding a paragraph]
#Paragraphs are fundamental in Word. They’re used for body text, but also for headings and list items like bullets.
#Here’s the simplest way to add one:

paragraph = document.add_paragraph('Lorem ipsum dolor sit amet.')

#This method returns a reference to a paragraph, newly added paragraph at the end of the document. 
#The new paragraph reference is assigned to paragraph in this case, but I’ll be leaving that out in the following examples 
#unless I have a need for it. In your code, often times you won’t be doing anything with the item after you’ve added it, 
#so there’s not a lot of sense in keep a reference to it hanging around.
#It’s also possible to use one paragraph as a “cursor” and insert a new paragraph directly above it:

prior_paragraph = paragraph.insert_paragraph_before('Lorem ipsum')

#This allows a paragraph to be inserted in the middle of a document, 
#something that’s often important when modifying an existing document rather than generating one from scratch.


[Adding a heading]
#In anything but the shortest document, body text is divided into sections, each of which starts with a heading. 
#Here’s how to add one:

document.add_heading('The REAL meaning of the universe')

#By default, this adds a top-level heading, what appears in Word as ‘Heading 1’. When you want a heading for a sub-section, 
#just specify the level you want as an integer between 1 and 9:

document.add_heading('The role of dolphins', level=2)

#If you specify a level of 0, a “Title” paragraph is added. 
#This can be handy to start a relatively short document that doesn’t have a separate title page.


[Adding a page break]
#Every once in a while you want the text that comes next to go on a separate page, even if the one you’re on isn’t full. 
#A “hard” page break gets this done:

document.add_page_break()

#If you find yourself using this very often, it’s probably a sign you could benefit by better understanding paragraph styles. 
#One paragraph style property you can set is to break a page immediately before each paragraph having that style. 
#So you might set your headings of a certain level to always start a new page. More on styles later. 
#They turn out to be critically important for really getting the most out of Word.


[Adding a table]
#One frequently encounters content that lends itself to tabular presentation, lined up in neat rows and columns. 
#Word does a pretty good job at this. Here’s how to add a table:

table = document.add_table(rows=2, cols=2)

#Tables have several properties and methods you’ll need in order to populate them. 
#Accessing individual cells is probably a good place to start. 
#As a baseline, you can always access a cell by its row and column indicies:

cell = table.cell(0, 1)

#This gives you the right-hand cell in the top row of the table we just created. Note that row and column indicies are zero-based, 
#just like in list access.
#Once you have a cell, you can put something in it:

cell.text = 'parrot, possibly dead'

#Frequently it’s easier to access a row of cells at a time, for example when populating a table of variable length from a data source. 
#The .rows property of a table provides access to individual rows, each of which has a .cells property. 
#The .cells property on both Row and Column supports indexed access, like a list:

row = table.rows[1]
row.cells[0].text = 'Foo bar to you.'
row.cells[1].text = 'And a hearty foo bar to you too sir!'

#The .rows and .columns collections on a table are iterable, so you can use them directly in a for loop. 
#Same with the .cells sequences on a row or column:

for row in table.rows:
    for cell in row.cells:
        print(cell.text)

#If you want a count of the rows or columns in the table, just use len() on the sequence:

row_count = len(table.rows)
col_count = len(table.columns)

#You can also add rows to a table incrementally like so:

row = table.add_row()

#This can be very handy for the variable length table scenario we mentioned above:

# get table data -------------
items = get_things_from_database_or_something()

# add table ------------------
table = document.add_table(1, 3)

# populate header row --------
heading_cells = table.rows[0].cells
heading_cells[0].text = 'Qty'
heading_cells[1].text = 'SKU'
heading_cells[2].text = 'Description'

# add a data row for each item
for item in items:
    cells = table.add_row().cells
    cells[0].text = str(item.qty)
    cells[1].text = item.sku
    cells[2].text = item.desc
#The same works for columns, although I’ve yet to see a use case for it.

#Word has a set of pre-formatted table styles you can pick from its table style gallery. 
#You can apply one of those to the table like this:

table.style = 'LightShading-Accent1'
#The style name is formed by removing all the spaces from the table style name. 
#You can find the table style name by hovering your mouse over its thumbnail in Word’s table style gallery.


[Adding a picture]
#Word lets you place an image in a document using the Insert > Photo > Picture from file... menu item. 
#Here’s how to do it in python-docx:

document.add_picture('image-filename.png')

#This example uses a path, which loads the image file from the local filesystem. 
#You can also use a file-like object, essentially any object that acts like an open file. 
#This might be handy if you’re retrieving your image from a database or over a network and don’t want to get the filesystem involved.


